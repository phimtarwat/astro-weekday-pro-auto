from datetime import datetime, date
from typing import Optional

import zoneinfo
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse, FileResponse

# ‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏ö‡∏ö lite (pure Python) ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô api/flatlib_lite/__init__.py
import flatlib_lite as astro_chart

# ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Pro-Auto (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏®‡∏µ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î geopy ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
from geopy.geocoders import Nominatim

app = FastAPI(title="Astro Weekday API", version="2.1.0")

# ------------------------------
# ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
# ------------------------------
DAYS_TH = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
MONTHS_TH_LONG = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°","‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå","‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°","‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô","‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°","‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°","‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°","‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô","‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°","‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô","‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
]
MONTHS_TH_SHORT = [
    "‡∏°.‡∏Ñ.","‡∏Å.‡∏û.","‡∏°‡∏µ.‡∏Ñ.","‡πÄ‡∏°.‡∏¢.","‡∏û.‡∏Ñ.","‡∏°‡∏¥.‡∏¢.",
    "‡∏Å.‡∏Ñ.","‡∏™.‡∏Ñ.","‡∏Å.‡∏¢.","‡∏ï.‡∏Ñ.","‡∏û.‡∏¢.","‡∏ò.‡∏Ñ."
]


# ------------------------------
# Utilities
# ------------------------------
def parse_ddmmyyyy_th(s: str) -> tuple[date, str]:
    """‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà DD/MM/YYYY (‡∏û.‡∏®. ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ.‡∏®.) -> (date(‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä), "BE"/"CE")"""
    s = s.strip()
    try:
        d = datetime.strptime(s, "%d/%m/%Y").date()
    except ValueError:
        raise HTTPException(status_code=400, detail="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY)")
    calendar = "BE" if d.year >= 2400 else "CE"
    if calendar == "BE":
        # ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
        y = d.year - 543
        try:
            d = d.replace(year=y)
        except ValueError:
            # ‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ 29 ‡∏Å.‡∏û. ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÑ‡∏°‡πà leap
            d = d.replace(year=y, day=28)
    return d, calendar


def format_thai_date(d: date, style: str = "short") -> dict:
    """‡∏Ñ‡∏∑‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á + ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®.)"""
    wd_full = DAYS_TH[d.weekday()]
    wd_compact = "‡∏û‡∏§‡∏´‡∏±‡∏™" if wd_full == "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ" else wd_full
    y_be = d.year + 543
    m_idx = d.month - 1
    m_short = MONTHS_TH_SHORT[m_idx]
    m_long = MONTHS_TH_LONG[m_idx]
    thai_short = f"‡∏ß‡∏±‡∏ô{wd_full}‡∏ó‡∏µ‡πà {d.day} {m_short} {y_be}"
    thai_long = f"‡∏ß‡∏±‡∏ô{wd_full}‡∏ó‡∏µ‡πà {d.day} {m_long} {y_be}"
    return {
        "weekday_full": wd_full,
        "weekday_compact": wd_compact,
        "thai_date_short": thai_short,
        "thai_date_long": thai_long,
        "thai_date": thai_long if style == "long" else thai_short
    }


def detect_zodiac_system(lat: float, lon: float, timezone: str) -> str:
    """
    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏®‡∏µ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:
    - ‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏¥‡∏£‡∏≤‡∏¢‡∏ô‡∏∞ ‚Üí sidereal
    - ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‚Üí tropical
    """
    # fallback ‡∏à‡∏≤‡∏Å timezone ‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å geocode ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
    tz_lower = (timezone or "").lower()
    if any(x in tz_lower for x in [
        "bangkok", "kolkata", "yangon", "colombo", "phnom_penh",
        "vientiane", "hanoi", "jakarta", "kathmandu", "dhaka"
    ]):
        return "sidereal"

    try:
        geolocator = Nominatim(user_agent="astro_weekday_api")
        loc = geolocator.reverse((lat, lon), language="en", timeout=10)
        country = (loc.raw.get("address", {}).get("country", "") or "").lower()
        sidereal_countries = {
            "thailand", "laos", "myanmar", "burma", "cambodia",
            "india", "sri lanka", "nepal", "bangladesh"
        }
        return "sidereal" if any(c in country for c in sidereal_countries) else "tropical"
    except Exception:
        # ‡∏ñ‡πâ‡∏≤‡∏î‡∏π‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ heuristic ‡∏à‡∏≤‡∏Å timezone
        return "sidereal" if "asia/" in tz_lower else "tropical"


# ------------------------------
# Root & Health
# ------------------------------
@app.get("/")
def root():
    return {"message": "Astro Weekday API is running üöÄ"}

@app.get("/health")
def health():
    return {"ok": True}


# ------------------------------
# /api/weekday  ‚Äî ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
# ------------------------------
@app.get("/api/weekday")
def get_weekday(date: str):
    d, cal = parse_ddmmyyyy_th(date)
    weekday = DAYS_TH[d.weekday()]
    return {
        "date": date,
        "weekday": weekday,
        "resolved_gregorian": d.isoformat(),
        "calendar": cal
    }


# ------------------------------
# /api/weekday-th  ‚Äî ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ
# ------------------------------
@app.get("/api/weekday-th")
def get_weekday_th(date: str, style: Optional[str] = "short"):
    d, cal = parse_ddmmyyyy_th(date)
    payload = format_thai_date(d, style or "short")
    return {
        "input": {"date": date, "style": style or "short"},
        "resolved_gregorian": d.isoformat(),
        "calendar": cal,
        **payload
    }


# ------------------------------
# /api/astro-weekday  ‚Äî ‡∏ß‡∏±‡∏ô+‡πÄ‡∏ß‡∏•‡∏≤+‡πÑ‡∏ó‡∏°‡πå‡πÇ‡∏ã‡∏ô+‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
# ------------------------------
@app.get("/api/astro-weekday")
def get_astro_weekday(
    date: str,
    time: Optional[str] = None,
    timezone: Optional[s]()
