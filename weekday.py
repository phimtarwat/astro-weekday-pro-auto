from fastapi import FastAPI, HTTPException
from datetime import datetime
from geopy.geocoders import Nominatim
from typing import Optional
import flatlib_lite as astro_chart

app = FastAPI(title="Astro Weekday API", version="2.0.0")

# ------------------------------
# üîπ Utility: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢/‡∏™‡∏≤‡∏Å‡∏•
# ------------------------------
def parse_ddmmyyyy_th(date_str: str):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å DD/MM/YYYY (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏û.‡∏®. / ‡∏Ñ.‡∏®.)"""
    day, month, year = [int(x) for x in date_str.split("/")]
    if year > 2400:  # ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
        year -= 543
    return datetime(year, month, day), "BE" if year < 2400 else "AD"

# ------------------------------
# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏®‡∏µ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏à‡∏≤‡∏Å lat/lon)
# ------------------------------
def detect_zodiac_system(lat: float, lon: float) -> str:
    geolocator = Nominatim(user_agent="astro_api")
    try:
        location = geolocator.reverse((lat, lon), language="en")
        country = location.raw["address"].get("country", "").lower()
    except Exception:
        return "sidereal"  # fallback ‡πÑ‡∏ó‡∏¢

    sidereal_countries = [
        "thailand", "laos", "myanmar", "burma", "cambodia",
        "india", "sri lanka", "nepal", "bangladesh"
    ]

    for name in sidereal_countries:
        if name in country:
            return "sidereal"
    return "tropical"

# ------------------------------
# üîπ API ‡∏´‡∏•‡∏±‡∏Å
# ------------------------------
@app.get("/api/astro-chart")
def get_astro_chart(
    date: str,
    time: str,
    timezone: str = "Asia/Bangkok",
    lat: float = 13.75,
    lon: float = 100.5
):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚Äî ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏®‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏Å‡∏¥‡∏î"""
    d, cal = parse_ddmmyyyy_th(date)
    zodiac_system = detect_zodiac_system(lat, lon)

    try:
        result = astro_chart.compute_chart(d, time, timezone, lat, lon, zodiac_system)
        return {
            "input": {
                "date": date, "time": time, "timezone": timezone,
                "lat": lat, "lon": lon, "auto_system": zodiac_system
            },
            "planets": result
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ------------------------------
# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô
# ------------------------------
@app.get("/api/weekday")
def get_weekday(date: str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏ó‡∏¢/‡∏™‡∏≤‡∏Å‡∏•)"""
    d, cal = parse_ddmmyyyy_th(date)
    weekday_th = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
    wd = weekday_th[d.weekday()]
    return {"date": date, "weekday": wd}

# ------------------------------
# ü™ê Transit: ‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
# ------------------------------
@app.get("/api/astro-transit")
def get_astro_transit(
    base_date: str,
    base_time: str = "12:00",
    target_date: Optional[str] = None,
    lat: float = 13.75,
    lon: float = 100.5,
    timezone: str = "Asia/Bangkok"
):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡∏≤‡∏ß‡∏à‡∏£‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á
    - base_date = ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
    - target_date = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏≤‡∏ß‡∏à‡∏£ (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
    """
    base_d, _ = parse_ddmmyyyy_th(base_date)
    zodiac_system = detect_zodiac_system(lat, lon)

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (default = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
    if target_date:
        target_d, _ = parse_ddmmyyyy_th(target_date)
    else:
        target_d = datetime.utcnow()

    # ‡∏î‡∏≤‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏ß‡∏á
    natal = astro_chart.compute_chart(base_d, base_time, timezone, lat, lon, zodiac_system)
    # ‡∏î‡∏≤‡∏ß‡∏à‡∏£
    transit = astro_chart.compute_chart(target_d, "12:00", timezone, lat, lon, zodiac_system)

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    interactions = []
    for p in natal:
        if p in transit:
            diff = abs(natal[p]["lon"] - transit[p]["lon"])
            if diff < 10 or diff > 350:
                interactions.append(f"{p}: ‡∏î‡∏≤‡∏ß‡∏à‡∏£‡∏ó‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡∏¥‡∏°")
            elif 170 < diff < 190:
                interactions.append(f"{p}: ‡∏î‡∏≤‡∏ß‡∏à‡∏£‡πÄ‡∏•‡πá‡∏á‡∏î‡∏≤‡∏ß‡πÄ‡∏î‡∏¥‡∏°")

    return {
        "system": zodiac_system,
        "natal_date": base_date,
        "target_date": target_d.strftime("%d/%m/%Y"),
        "natal": natal,
        "transit": transit,
        "analysis": interactions
    }


# ------------------------------
# üíû Match: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏î‡∏ß‡∏á‡∏Ñ‡∏π‡πà
# ------------------------------
@app.get("/api/astro-match")
def get_astro_match(
    date1: str, time1: str, lat1: float, lon1: float,
    date2: str, time2: str, lat2: float, lon2: float,
    timezone: str = "Asia/Bangkok"
):
    """
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
    - ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
    """
    d1, _ = parse_ddmmyyyy_th(date1)
    d2, _ = parse_ddmmyyyy_th(date2)

    zodiac_system1 = detect_zodiac_system(lat1, lon1)
    zodiac_system2 = detect_zodiac_system(lat2, lon2)

    chart1 = astro_chart.compute_chart(d1, time1, timezone, lat1, lon1, zodiac_system1)
    chart2 = astro_chart.compute_chart(d2, time2, timezone, lat2, lon2, zodiac_system2)

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå (‡∏î‡∏π‡∏£‡∏≤‡∏®‡∏µ‡∏î‡∏≤‡∏ß‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    score = 0
    comments = []
    key_planets = ["Sun", "Moon", "Venus", "Mars"]
    for p in key_planets:
        if chart1[p]["sign"] == chart2[p]["sign"]:
            score += 25
            comments.append(f"{p}: ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≤‡∏®‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Å‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢)")
        elif abs(chart1[p]["lon"] - chart2[p]["lon"]) < 30:
            score += 15
            comments.append(f"{p}: ‡∏î‡∏≤‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô (‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏î‡∏µ)")
        else:
            comments.append(f"{p}: ‡∏î‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏®‡∏µ (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß)")

    return {
        "person1": {"date": date1, "time": time1, "system": zodiac_system1},
        "person2": {"date": date2, "time": time2, "system": zodiac_system2},
        "score": min(score, 100),
        "comments": comments
    }

