from fastapi import FastAPI, HTTPException
from datetime import datetime
from geopy.geocoders import Nominatim
from typing import Optional
import flatlib_lite as astro_chart

app = FastAPI(title="Astro Weekday API", version="2.0.0")

# ------------------------------
# üîπ Utility: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢/‡∏™‡∏≤‡∏Å‡∏•
# ------------------------------
def parse_ddmmyyyy_th(date_str: str):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å DD/MM/YYYY (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡∏û.‡∏®. / ‡∏Ñ.‡∏®.)"""
    day, month, year = [int(x) for x in date_str.split("/")]
    if year > 2400:  # ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.
        year -= 543
    return datetime(year, month, day), "BE" if year < 2400 else "AD"

# ------------------------------
# üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏®‡∏µ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏à‡∏≤‡∏Å lat/lon)
# ------------------------------
def detect_zodiac_system(lat: float, lon: float) -> str:
    geolocator = Nominatim(user_agent="astro_api")
    try:
        location = geolocator.reverse((lat, lon), language="en")
        country = location.raw["address"].get("country", "").lower()
    except Exception:
        return "sidereal"  # fallback ‡πÑ‡∏ó‡∏¢

    sidereal_countries = [
        "thailand", "laos", "myanmar", "burma", "cambodia",
        "india", "sri lanka", "nepal", "bangladesh"
    ]

    for name in sidereal_countries:
        if name in country:
            return "sidereal"
    return "tropical"

# ------------------------------
# üîπ API ‡∏´‡∏•‡∏±‡∏Å
# ------------------------------
@app.get("/api/astro-chart")
def get_astro_chart(
    date: str,
    time: str,
    timezone: str = "Asia/Bangkok",
    lat: float = 13.75,
    lon: float = 100.5
):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏ß‡∏á‡∏î‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚Äî ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏®‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÄ‡∏Å‡∏¥‡∏î"""
    d, cal = parse_ddmmyyyy_th(date)
    zodiac_system = detect_zodiac_system(lat, lon)

    try:
        result = astro_chart.compute_chart(d, time, timezone, lat, lon, zodiac_system)
        return {
            "input": {
                "date": date, "time": time, "timezone": timezone,
                "lat": lat, "lon": lon, "auto_system": zodiac_system
            },
            "planets": result
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ------------------------------
# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô
# ------------------------------
@app.get("/api/weekday")
def get_weekday(date: str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏ó‡∏¢/‡∏™‡∏≤‡∏Å‡∏•)"""
    d, cal = parse_ddmmyyyy_th(date)
    weekday_th = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
    wd = weekday_th[d.weekday()]
    return {"date": date, "weekday": wd}

